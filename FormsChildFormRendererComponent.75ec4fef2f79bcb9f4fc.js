(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{xc6l:function(s,n){s.exports=[{file:"README.md",lang:"md",section:"default",code:'<p>The library handles the logical aspect of a child form. The visual\naspect is handled like any other form control, using the <strong>renderer</strong>.</p>\n<p>A child control&#39;s visual type is set by the library to <code>form</code>.</p>\n<p>The <strong>renderer</strong> displays a single form control and a child form is\na single form control (a <code>FormGroup</code>). The renderer is then responsible\nfor child forms, how to show them and how to manage them.</p>\n<p>For example, the renderer can show a child form in a different tab,\nopen it using a new dialog window or any other UI visualization you can\nthink of. Another option is ignore child form&#39;s in the renderer and\nrequire the developer to manage them.</p>\n<div class="info">\nBecause a child form is like any other visual type sent to the renderer\nyou can also use local override&#39;s using <code>form</code> as the visual type.\n</div>\n'},{file:"child-form-renderer.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./model\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-child-form-renderer\'</span>,\n  templateUrl: <span class="hljs-string">\'./child-form-renderer.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./child-form-renderer.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ChildFormRendererComponent {\n  model = <span class="hljs-keyword">new</span> Hero();\n}\n',title:"Component"},{file:"child-form-renderer.component.html",lang:"html",section:"tdmDemo",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>\n                [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'allies\']"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"child-form-renderer.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> BaseCamp {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Base Name\'</span>,\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      flatten: {\n        lng: {\n          render: {\n            vType: <span class="hljs-string">\'number\'</span>,\n            label: <span class="hljs-string">\'Base Longitude\'</span>\n          }\n        },\n        lat: {\n          render: {\n            vType: <span class="hljs-string">\'number\'</span>,\n            label: <span class="hljs-string">\'Base Latitude\'</span>\n          }\n        }\n      }\n    }\n  })\n  coordinates: {\n    lng: <span class="hljs-built_in">number</span>;\n    lat: <span class="hljs-built_in">number</span>;\n  };\n}\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          options: [\n              { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n              { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n              { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n              { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloaning\'</span> },\n              { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        identity: <span class="hljs-string">\'name\'</span>,\n        vType: <span class="hljs-string">\'form\'</span>,\n        label: <span class="hljs-string">\'Base Camp\'</span>\n      },\n      childForm: <span class="hljs-literal">true</span>\n    }\n  })\n  base: BaseCamp;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Allies\'</span>\n      }\n    }\n  })\n  allies: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    <span class="hljs-keyword">type</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> BaseCamp,\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        identity: <span class="hljs-string">\'name\'</span>,\n        vType: <span class="hljs-string">\'form\'</span>,\n        label: <span class="hljs-string">\'Base Camp\'</span>\n      },\n      childForm: <span class="hljs-literal">true</span>\n    }\n  })\n  basesDestroyed: BaseCamp[];\n}\n',title:"Model"}]}}]);