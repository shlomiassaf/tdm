(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{151:function(s,n){s.exports=[{file:"field-sync-redraw.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component, ViewChild } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { BeforeRenderEventHandler, DynamicFormComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../../4-element-metadata\'</span>;\n<span class="hljs-keyword">import</span> { getSuperPowersAsync } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../before-render-event\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-field-sync-redraw\'</span>,\n  templateUrl: <span class="hljs-string">\'./field-sync-redraw.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./field-sync-redraw.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> FieldSyncRedrawComponent {\n  model = <span class="hljs-keyword">new</span> Hero();\n\n  stateFieldType: <span class="hljs-string">\'select\'</span> | <span class="hljs-string">\'radio\'</span> = <span class="hljs-string">\'select\'</span>;\n\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'dynForm\'</span>) dynForm: DynamicFormComponent;\n\n  beforeRender($event: BeforeRenderEventHandler): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> superPower = $event.instructions[<span class="hljs-string">\'superPower\'</span>];\n    <span class="hljs-keyword">if</span> (superPower) {\n      <span class="hljs-comment">// ASYNC CALLS THAT BLOCK THE WHOLE FORM FROM RENDERING, GOOD FOR GETTING DATA FROM REMOTE SERVER.</span>\n      <span class="hljs-comment">// E.G.: GETTING GROUPS LISTED UNDER A USER, ETC...</span>\n      <span class="hljs-keyword">const</span> existingPowers = superPower.getData(<span class="hljs-string">\'options\'</span>) || [];\n      <span class="hljs-keyword">const</span> p = getSuperPowersAsync().then(<span class="hljs-function"><span class="hljs-params">newPowers</span> =&gt;</span> {\n        <span class="hljs-keyword">if</span> (existingPowers.length !== <span class="hljs-number">10</span>) {\n          existingPowers.push(...newPowers);\n        }\n        superPower.mergeData({ options: existingPowers });\n      });\n      <span class="hljs-comment">// mark this field as async, no render until promise completes.</span>\n      $event.async(p);\n\n      <span class="hljs-keyword">if</span> (existingPowers.length !== <span class="hljs-number">10</span>) {\n        <span class="hljs-keyword">this</span>.stateFieldType = superPower.vType = <span class="hljs-string">\'select\'</span>;\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">this</span>.fieldSync();\n      }\n    }\n  }\n\n  fieldSync(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> superPower = <span class="hljs-keyword">this</span>.dynForm.instructions[<span class="hljs-string">\'superPower\'</span>];\n    <span class="hljs-keyword">if</span> (superPower &amp;&amp; <span class="hljs-keyword">this</span>.stateFieldType !== superPower.vType) {\n      superPower.vType = <span class="hljs-keyword">this</span>.stateFieldType;\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.stateFieldType === <span class="hljs-string">\'radio\'</span>) {\n        superPower.mergeData({ vertical: <span class="hljs-literal">true</span> });\n      }\n    }\n  }\n}\n',title:"Component"},{file:"field-sync-redraw.component.html",lang:"html",section:"default",code:'<span class="hljs-tag">&lt;<span class="hljs-name">tdm-markdown-view</span> [<span class="hljs-attr">markdown</span>]=<span class="hljs-string">"code | async | tdmCode:[{file: \'README.md\'}]:true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tdm-markdown-view</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"custom-form-actions"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"! (dynForm?.renderState | async)"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"stateFieldType"</span> (<span class="hljs-attr">change</span>)=<span class="hljs-string">"stateFieldType = $event.value"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"select"</span>&gt;</span>Select<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"radio"</span>&gt;</span>Radio Group<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.redraw()"</span>&gt;</span>REDRAW<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"fieldSync()"</span>&gt;</span>FIELD SYNC<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"render-state-form-container"</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span>\n                  <span class="hljs-attr">style</span>=<span class="hljs-string">"display: block"</span>\n                  [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>\n                  [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'base\', \'allies\', \'basesDestroyed\']"</span>\n                  (<span class="hljs-attr">beforeRender</span>)=<span class="hljs-string">"beforeRender($event)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui-block"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"dynForm?.renderState | async"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-spinner</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-spinner</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n',title:"Template"},{file:"field-sync-redraw.component.scss",lang:"scss",section:"default",code:'<span class="hljs-selector-class">.render-state-form-container</span> {\n  <span class="hljs-attribute">position</span>: relative;\n  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;\n}\n\n<span class="hljs-selector-class">.ui-block</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.15</span>);\n  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">align-items</span>: center;\n  <span class="hljs-attribute">justify-content</span>: center;\n}\n',title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'date\'</span>,\n        label: <span class="hljs-string">\'Hero Birth\'</span>\n      }\n    }\n  })\n  birth: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n            { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n            { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n            { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloning\'</span> },\n            { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Hobbies\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            <span class="hljs-string">\'Baseball\'</span>,\n            <span class="hljs-string">\'Basketball\'</span>,\n            <span class="hljs-string">\'Buildi\'</span>,\n            <span class="hljs-string">\'Cosplay\'</span>,\n            <span class="hljs-string">\'Soccer\'</span>,\n            <span class="hljs-string">\'Spelunkering\'</span>,\n            <span class="hljs-string">\'Storm Chasing\'</span>,\n            <span class="hljs-string">\'Wrestling\'</span>,\n            <span class="hljs-string">\'Writing\'</span>,\n            <span class="hljs-string">\'Yoga\'</span>\n          ].map( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> ({value})),\n        }\n      }\n    }\n  })\n  hobbies: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>&gt;;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'chips\'</span>,\n        label: <span class="hljs-string">\'Chips\'</span>,\n        data: {\n          removable: <span class="hljs-literal">true</span>,\n          addOnBlur: <span class="hljs-literal">true</span>,\n        }\n      }\n    }\n  })\n  chips: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'textarea\'</span>,\n        label: <span class="hljs-string">\'Bio\'</span>,\n        data: {\n          autoSize: <span class="hljs-literal">false</span>,\n          minRows: <span class="hljs-number">3</span>,\n          maxRows: <span class="hljs-number">5</span>\n        }\n      }\n    }\n  })\n  bio: <span class="hljs-built_in">string</span>;\n}\n',title:"Model"},{file:"README.md",lang:"md",section:"default",code:'<h1><a id="renderstate-event" class="anchor" href="#renderstate-event"><span class="header-link"></span></a>renderState Event</h1><p>As explained and demonstrated in the <strong>(beforeRender)</strong> event chapter,\n<code>RenderInstruction</code> instances control the rendering output of a form\nfield.</p>\n<p>The event is emitted on first load but also when the <code>redraw()</code> method\nis invoked, so it means that the <code>redraw()</code> method is way to update\ndata required for form control rendering or event change the type of\nit which will result in a completely different component rendered for\nthat form control.</p>\n<p>In fact, there are 2 ways to update a <code>RenderInstruction</code> instance,\na redraw or a field sync.</p>\n<h3><a id="redraw" class="anchor" href="#redraw"><span class="header-link"></span></a>redraw</h3><p>A complete redraw will re-render all of the controls in the form and\nemit the <strong>(beforeRender)</strong>. This approach is like a re-init to the\nrendered form.</p>\n<h3><a id="field-sync" class="anchor" href="#field-sync"><span class="header-link"></span></a>Field Sync</h3><p>A field sync is more subtle and involves re-rendering of a single form\ncontrol, it does not emit any events and does not apply any asynchronous\nlogic.</p>\n<h3><a id="what-should-i-use-" class="anchor" href="#what-should-i-use-"><span class="header-link"></span></a>What should I use?</h3><p>A redraw emit events, so if you have a UI blocker component that shows\nwhen the form is rendering (renderState) and you know that async\noperations will run then use it.</p>\n<p>A field sync will not fire events so it might be handy when updating\nthe type of a component or some metadata related to it.</p>\n<p>It can also be used for async operations but you will need to block the\nUI manually or block that specific control manually.</p>\n<p>Sometimes, especially when change detection is not strict, changing just\ndata does not require a redraw or a field sync.</p>\n<p>In the example below the <strong>state</strong> field is being rendered with the\n<strong>select</strong> visual type, you can toggle the rendered component between\n<code>select</code> and <code>radio</code> and click on the buttons to see how each approach\neffects the UI</p>\n'}]},152:function(s,n){s.exports=[{file:"render-state-event.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { BeforeRenderEventComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../before-render-event\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-render-state-event\'</span>,\n  templateUrl: <span class="hljs-string">\'./render-state-event.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./render-state-event.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> RenderStateEventComponent <span class="hljs-keyword">extends</span> BeforeRenderEventComponent {\n\n}\n',title:"Component"},{file:"render-state-event.component.html",lang:"html",section:"TDM-DEMO",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"render-state-form-container"</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span>\n                  <span class="hljs-attr">style</span>=<span class="hljs-string">"display: block"</span>\n                  [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>\n                  [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'base\', \'allies\', \'basesDestroyed\']"</span>\n                  (<span class="hljs-attr">beforeRender</span>)=<span class="hljs-string">"beforeRender($event)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui-block"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"dynForm?.renderState | async"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-spinner</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-spinner</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>',title:"Template"},{file:"render-state-event.component.scss",lang:"scss",section:"default",code:'<span class="hljs-selector-class">.render-state-form-container</span> {\n  <span class="hljs-attribute">position</span>: relative;\n  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;\n}\n\n<span class="hljs-selector-class">.ui-block</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.15</span>);\n  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">align-items</span>: center;\n  <span class="hljs-attribute">justify-content</span>: center;\n}\n',title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'date\'</span>,\n        label: <span class="hljs-string">\'Hero Birth\'</span>\n      }\n    }\n  })\n  birth: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n            { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n            { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n            { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloning\'</span> },\n            { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Hobbies\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            <span class="hljs-string">\'Baseball\'</span>,\n            <span class="hljs-string">\'Basketball\'</span>,\n            <span class="hljs-string">\'Buildi\'</span>,\n            <span class="hljs-string">\'Cosplay\'</span>,\n            <span class="hljs-string">\'Soccer\'</span>,\n            <span class="hljs-string">\'Spelunkering\'</span>,\n            <span class="hljs-string">\'Storm Chasing\'</span>,\n            <span class="hljs-string">\'Wrestling\'</span>,\n            <span class="hljs-string">\'Writing\'</span>,\n            <span class="hljs-string">\'Yoga\'</span>\n          ].map( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> ({value})),\n        }\n      }\n    }\n  })\n  hobbies: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>&gt;;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'chips\'</span>,\n        label: <span class="hljs-string">\'Chips\'</span>,\n        data: {\n          removable: <span class="hljs-literal">true</span>,\n          addOnBlur: <span class="hljs-literal">true</span>,\n        }\n      }\n    }\n  })\n  chips: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'textarea\'</span>,\n        label: <span class="hljs-string">\'Bio\'</span>,\n        data: {\n          autoSize: <span class="hljs-literal">false</span>,\n          minRows: <span class="hljs-number">3</span>,\n          maxRows: <span class="hljs-number">5</span>\n        }\n      }\n    }\n  })\n  bio: <span class="hljs-built_in">string</span>;\n}\n',title:"Model"},{file:"README.md",lang:"md",section:"default",code:'<h1><a id="renderstate-event" class="anchor" href="#renderstate-event"><span class="header-link"></span></a>renderState Event</h1><p>Event fired when the rendering of form control is deferred and again\nwhen the rendering complete.</p>\n<p>The <strong>renderState</strong> event is best for:</p>\n<ul>\n<li>Updating the UI when an async operation start/end</li>\n</ul>\n<p>The value emitted by the event represent the rendering status of the\nform. <strong>true</strong> means the form is rendering (not ready), <strong>false</strong> means\nthe form is not rendering, idle.</p>\n<p>This event is linked directly to the <strong>(beforeRender)</strong> event. When the\nrendering state is <strong>true</strong> it means that the <strong>beforeRender</strong> event\nwas fired and an handler triggered an async operation.</p>\n<p>In the following example we are using the same scenario we used in the\n<strong>(beforeRender)</strong> chapter but we now we register to get notifications\nfrom <strong>(renderState)</strong> which allows us to block the form&#39;s UI area and\nshow a spinner.</p>\n<p>This implementation does not involve TS code, only template code.</p>\n'}]}}]);