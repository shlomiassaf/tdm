(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"RX+o":function(s,e){s.exports=[{file:"README.md",lang:"md",section:"default",code:'<h1><a id="flow-control" class="anchor" href="#flow-control"><span class="header-link"></span></a>Flow Control</h1><p>Flow Control is a plugin that extends the <code>ResourceControl</code> class and add&#39;s workflow control tools that enable\ncomposition of a process.</p>\n<h2><a id="replay" class="anchor" href="#replay"><span class="header-link"></span></a>replay</h2><p>The <code>replay()</code> method will execute the last request.</p>\n<p>If the resource is <code>busy</code> it will throw.<br>If there are no previous requests (this is the 1st) it will throw.</p>\n<h2><a id="replayafter" class="anchor" href="#replayafter"><span class="header-link"></span></a>replayAfter</h2><p>The <code>replayAfter()</code> method will execute the last request once the provided resources finish their current operation.</p>\n<p>For the current resource, the same rules that apply on <code>replay()</code> apply on <code>replayAfter</code>, i.e. the busy state must be\nfalse and the resource should have been executed at least once.</p>\n<p><code>replayAfter()</code> accepts 2 parameters</p>\n<ol>\n<li>A resource instance <strong>or</strong> a promise for a resource instance <strong>or</strong> an array them.</li>\n<li>Error handling strategy - Whether to reply or not if an error is thrown from some or all of the resources.<ul>\n<li>always: Always execute the reply operation</li>\n<li>some: Execute the reply operation if at least one item did not throw.</li>\n<li>never: Don&#39;t execute the reply operation if at least one item threw.</li>\n</ul>\n</li>\n</ol>\n<p>Note that when providing a promise (single, or inside an array) in parameter 1 you must provide the original promise\nand not the chained one (see DAO).</p>\n<h2><a id="snapshots" class="anchor" href="#snapshots"><span class="header-link"></span></a>Snapshots</h2><p>API for creating and restoring a single snapshot of the resource.</p>\n<ul>\n<li><strong>hasSnapshot</strong> - Check if a snapshot exist for this resource.</li>\n<li><strong>createSnapshot</strong> - Creates a snapshot of the current instance and stores it.</li>\n<li><strong>restoreSnapshot</strong> - Restores a previously created snapshot into the current instance (merge).</li>\n</ul>\n<div class="info">\nSnapshots are created / restored using serialization / deserialization. This means that all transformation rules set in\n<code>@Model()</code>, <code>@Prop()</code>, etc... apply.\n</div>\n\n\n<h2><a id="clone" class="anchor" href="#clone"><span class="header-link"></span></a>Clone</h2><p>The <code>clone()</code> method return a deep clone of the current resource.</p>\n<div class="info">\nSimilar to snapshots, clone are created using serialization / deserialization . This means that all transformation rules\nset in <code>@Model()</code>, <code>@Prop()</code>, etc... apply.\n</div>',title:"flow-control"},{file:"flow-control.component.ts",lang:"ts",section:"code",code:'resourceControl: ResourceControl&lt;Customer&gt;;\r\ncount: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;\r\n\r\n<span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> ngDao: NgDAO</span>) {\r\n  <span class="hljs-keyword">const</span> promise = ngDao.get(Customer).findById(<span class="hljs-string">\'ALFKI\'</span>);\r\n  <span class="hljs-keyword">this</span>.resourceControl = ResourceControl.get(&lt;<span class="hljs-built_in">any</span>&gt;promise);\r\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\r\n    <span class="hljs-keyword">const</span> replay = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\r\n      <span class="hljs-keyword">this</span>.count++;\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.count &gt; <span class="hljs-number">3</span>) {\r\n        resolve();\r\n      } <span class="hljs-keyword">else</span> {\r\n        <span class="hljs-keyword">this</span>.resourceControl = <span class="hljs-keyword">this</span>.resourceControl.replay();\r\n        <span class="hljs-keyword">this</span>.resourceControl.next().then(replay);\r\n      }\r\n    };\r\n    promise.then(replay);\r\n  });\r\n}\r\n',title:"Component"},{file:"flow-control.component.html",lang:"html",section:"code",code:'<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Busy State: {{ resourceControl?.busy }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Success Count: {{ count }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>',title:"Template"}]}}]);