(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{oAzQ:function(s,e){s.exports=[{file:"README.md",lang:"md",section:"PART-1",code:'<h1><a id="active-record" class="anchor" href="#active-record"><span class="header-link"></span></a>Active Record</h1><p>The active record is a famous design pattern for handling data\nmodels where resources &quot;know&quot; how to persist themselves. Instead of\nusing a DAO to read/write an resource we can just can methods on the\nresource itself.</p>\n<p>Let&#39;s jump straight into a demo, click on the <strong>play</strong> button:</p>\n',title:"active-record"},{file:"README.md",lang:"md",section:"PART-2",code:'<p><br></p>\n<div class="alert">\nIn the example above we make use of the <code>ResourceControl</code> discussed in the previous chapter. In the active record\npattern it is available on the instance through the <code>$rc</code> property (which can be customized).\n</div>\n\n<p>This example is identical to the DAO example with one difference, it is\nusing active record instead of DAO.</p>\n<p>We work with the resource&#39;s directly, creating new instances using the <code>new</code> keyword and not via DAO.</p>\n<p>The DAO API returns promises, which resolve the resource or reject an\nerror. Active record works differently, the returned value is based on\nthe instance.</p>\n<p>For this reason, we need to use the <code>ResourceControl</code> more often, but it&#39;s easy to access.</p>\n<h2><a id="active-record-api" class="anchor" href="#active-record-api"><span class="header-link"></span></a>Active Record API</h2><p>The active record API offer&#39;s the same functionality as in the DAP API, on the resource itself.</p>\n<h3><a id="static-api" class="anchor" href="#static-api"><span class="header-link"></span></a>Static API</h3><p>The static API is applied on the class as static methods.</p>\n<p>Static methods return the <strong>instance</strong>, or a collection.</p>\n<h3><a id="instance-api" class="anchor" href="#instance-api"><span class="header-link"></span></a>Instance API</h3><p>The instances API is applied on the instance of the resource, as instance methods.</p>\n<p>Instance methods return the <strong>resource control</strong>.</p>\n<h3><a id="resourcecontrol-next-" class="anchor" href="#resourcecontrol-next-"><span class="header-link"></span></a>ResourceControl.next()</h3><p>In the example we make use of the <code>next()</code> method. The <code>next()</code> method return a promise to the instance.</p>\n<p>Remember that when we invoke a request we get back the instance or resource control, they are values.</p>\n<p>The <code>next()</code> method will return the instance (or reject an error) once the request ends. </p>\n<h2><a id="installing-the-plugin" class="anchor" href="#installing-the-plugin"><span class="header-link"></span></a>Installing the plugin</h2><p>The active record plugin comes as sub-package within <code>ngx-http-client</code>, to use it you must register it.</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> <span class="hljs-string">\'@tdm/data/plugin/active-record\'</span>;\n\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'@tdm/data/plugin/active-record/src/$rc\'</span>;\n\n<span class="hljs-keyword">import</span> { plugins } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/data\'</span>;\n\nplugins.ActiveRecord.init({ resourceControl: <span class="hljs-string">\'$rc\'</span> });\n</code></pre>\n<p>Let&#39;s review line by line:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> <span class="hljs-string">\'@tdm/data/plugin/active-record\'</span>;\n</code></pre>\n<p>Import the plugin runtime files and load them (plugin is still not active, but it is loaded).</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> <span class="hljs-string">\'@tdm/data/plugin/active-record/src/$rc\'</span>;\n</code></pre>\n<p>Load design time (TS types) type injection of the resource control property, in this case <code>$rc</code>.<br>This line has <strong>no</strong> runtime effect, it will only add the <code>$rc</code> property for easy access to resource control from the\nresource (instance).</p>\n<p>This import is a predefined template that defined the property <code>$rc</code>, you can provide your own template placing the\nresource control on another property.</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { plugins } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/data\'</span>;\nplugins.ActiveRecord.init({ resourceControl: <span class="hljs-string">\'$rc\'</span> });\n</code></pre>\n<p>Import the <code>plugins</code> object to activate the plugin.</p>\n<p>The plugin accepts an option object which we use to specify the property used for the resource control.</p>\n<h3><a id="replacing-code-rc-code-property" class="anchor" href="#replacing-code-rc-code-property"><span class="header-link"></span></a>Replacing <code>$rc</code> property</h3><p>As mentioned, we can replace the property <code>$rc</code> with a custom property, this is done by augmenting the property into\nthe core constructs of <code>@tdm</code> for resource and resource collection.</p>\n<p>Let&#39;s demonstrate by changing <code>$rc</code> to <code>$resourceControl</code>:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { TDMModel, TDMCollection } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { plugins, ResourceControl } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/data\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'@tdm/data/plugin/active-record\'</span>;\n\n<span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> \'@tdm/core/tdm/src/model/tdm-model\' {\n  <span class="hljs-keyword">interface</span> TDMModel&lt;T&gt; {\n    readonly $resourceControl: ResourceControl&lt;<span class="hljs-keyword">this</span> &amp; T&gt;;\n  }\n\n  <span class="hljs-keyword">interface</span> TDMModelBase&lt;T&gt; {\n    readonly $resourceControl: ResourceControl&lt;<span class="hljs-keyword">this</span> &amp; T&gt;;\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> StatefulActiveRecordCollection&lt;T&gt;\n  <span class="hljs-keyword">extends</span> TDMCollection&lt;T&gt;, TDMModel&lt;StatefulActiveRecordCollection&lt;T&gt;&gt; { }\n\n<span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> \'@tdm/core/tdm/src/model/tdm-collection\' {\n  <span class="hljs-keyword">interface</span> TDMCollection&lt;T&gt; {\n    readonly $resourceControl: ResourceControl&lt;<span class="hljs-keyword">this</span> &amp; StatefulActiveRecordCollection&lt;T&gt;&gt;;\n  }\n}\n\nplugins.ActiveRecord.init({ resourceControl: <span class="hljs-string">\'$resourceControl\'</span> });\n</code></pre>\n<p>Key points:</p>\n<ul>\n<li>We augment existing types</li>\n<li>We apply this to runtime by activating with the right resource control property option.</li>\n</ul>\n<div class="alert">\nMake sure not to include a custom type augmentation and the default provided one, as it will augment\na property that does not exists at runtime.\n</div>\n',title:"active-record"},{file:"active-record.component.ts",lang:"ts",section:"code",code:'<span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) {\r\n\r\n  <span class="hljs-keyword">let</span> customer = <span class="hljs-keyword">await</span> Customer.findById(<span class="hljs-string">\'ALFKI\'</span>).$rc.next();\r\n\r\n  customer.CompanyName = <span class="hljs-string">\'Microsoft\'</span>;\r\n  customer.City = <span class="hljs-string">\'San Francisco\'</span>;\r\n  <span class="hljs-keyword">await</span> customer.$replace().next();\r\n\r\n  <span class="hljs-keyword">const</span> customers = <span class="hljs-keyword">await</span> Customer.query().$rc.next();\r\n\r\n  customer = customers.find(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> c.CustomerID === <span class="hljs-string">\'ALFKI\'</span>);\r\n  <span class="hljs-keyword">if</span> (!customer || customer.CompanyName !== <span class="hljs-string">\'Microsoft\'</span> || customer.City !== <span class="hljs-string">\'San Francisco\'</span>) {\r\n    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">\'Invalid demo!!!\'</span>);\r\n  }\r\n\r\n}\r\n'}]}}]);