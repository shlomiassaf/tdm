(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{CoAJ:function(o,e){o.exports=[{file:"README.md",lang:"md",section:"default",code:'<h1><a id="overview" class="anchor" href="#overview"><span class="header-link"></span></a>Overview</h1><p><code>ngx-http-client</code> is a library that acts as an <strong>Adapter</strong>, it can take\na <strong>Resource</strong> and apply <strong>Actions</strong> on it.</p>\n<p>It provides an API to <strong>Control</strong> (running) <strong>Actions</strong> and listen to\n<strong>Adapter</strong> notification for a specific <strong>Resource</strong>.</p>\n<p>The final result is a collection of models describing a remote HTTP\nserver as a data source, with easy to work with API.</p>\n<p>Adapters, Actions, Resources and ResourceControl are concepts which are\nnot unique to <code>ngx-http-client</code>, they all come from <code>@tdm/data</code>.</p>\n<p>Before we start, it is worth taking 5 minutes to understand the concepts\nbehind <code>@tdm/data</code> and how they work with each other. </p>\n<div class="info">\nYou might skip this section if you feel like jumping straight into\naction, however it is <strong>important</strong> that you come back after a chapter\nor two, understanding these concepts will make this tutorial easier to\nread. \n</div>\n\n<h2><a id="from-strong-model-strong-to-strong-resource-strong-" class="anchor" href="#from-strong-model-strong-to-strong-resource-strong-"><span class="header-link"></span></a>From <strong>Model</strong> to <strong>Resource</strong></h2><p>The <strong>Model</strong> is a fundamental building block in <code>@tdm/core</code>, it\nprovides a way to describe information and use that information to\nperform an operation.</p>\n<p><code>@tdm/ngx-dynamic-forms</code> is a good example of a library that makes use\nof the model to describe relationship between a class and a form.</p>\n<div class="info">\nIf you use <code>@tdm/ngx-dynamic-forms</code> you already know how to define a\nmodel using the <code>@Model()</code> decorator, which is covered in the\n<a class="tdm-anchor-trap" href="../../../forms/tutorial/creating-a-model">dynamic forms tutorial</a>\n</div>\n\n<p>The <em>operations</em> we can do with a model are limited and involve the\ntransformation from one structure to another using serialization and \ndeserialization, validation, etc...</p>\n<p>Let&#39;s say we want to take an instance of a model and be able to create\nan HTTP <em>POST</em> call from it? save it to local storage? save it to disk?\nsave it to a database? you get the point...</p>\n<p>While the tasks above undergo the same process, each task has a unique\nimplementation, requiring specific logic.   </p>\n<p>This is where <code>@tdm/data</code> comes in. An extension to <code>@tdm/core</code> that\nprovides a managed process and an API for working with adapters.</p>\n<h3><a id="adapters-and-actions" class="anchor" href="#adapters-and-actions"><span class="header-link"></span></a>Adapters and Actions</h3><p>In <code>@tdm/data</code> an <strong>Adapter</strong> is a logical unit that knows how to\nexecute well defined operations.</p>\n<p>We call these operations <strong>Actions</strong>, each adapter has it&#39;s own set of\nactions.</p>\n<p>We use the adapter and actions to perform operations on a model.</p>\n<p>In <code>@tdm/data</code>, a <strong>Model</strong> bound to an <strong>Adapter</strong> is called a <strong>Resource</strong>.\nit is an extended <strong>Model</strong>, it has all of it&#39;s features but it also\nrequires an <strong>Adapter</strong>.</p>\n<p>A <strong>Resource</strong> is a concept, a concrete resource is the combination of a\nmodel and adapter.</p>\n<p><code>ngx-http-client</code> is based on <code>@tdm/data</code>, it provides an <strong>Adapter</strong>\nthat knows how to execute http operations (using angular&#39;s <code>HttpClient</code>)\nand actions for that adapter. To bind a model and an adapter together\na decorator is used, <code>@HttpResource()</code> which replaces <code>@Model()</code>.</p>\n<p>Let&#39;s recap:</p>\n<ul>\n<li><strong>Model</strong>: A class representing a structure</li>\n<li><strong>Action</strong>: An HTTP operation that the model supports (a.k.a operation)</li>\n<li><strong>Adapter</strong>: A logical unit that executes an <strong>Action</strong> on a <strong>Model</strong></li>\n<li><strong>Resource</strong>: A <strong>Model</strong> bound to an <strong>Adapter</strong> with mapped <strong>Actions</strong>. </li>\n</ul>\n<p>We will not use the term <strong>Model</strong> from here on but note that when we\nrefer to a <strong>Resource</strong> it is also a <strong>Model</strong>.</p>\n<div class="alert">\nBecause a <strong>Resource</strong> is an extension of a <strong>Model</strong> we can use a\nthe same class decorated as a <strong>Resource</strong> to describe dynamic form\ndefinitions. \n</div>\n\n<h2><a id="resource-control" class="anchor" href="#resource-control"><span class="header-link"></span></a>Resource Control</h2><p>Resources, Actions and Adapters are used by <code>@tdm/data</code> as an API to\ndescribe actions for a resource and how to execute them.</p>\n<p>In addition, <code>@tdm/data</code> comes with an API to control (running) actions,\nlisten to resource events and work with resources.</p>\n<p>For example, cancelling a running actions, replay a previous action,\nclone a resource, etc...</p>\n'}]}}]);