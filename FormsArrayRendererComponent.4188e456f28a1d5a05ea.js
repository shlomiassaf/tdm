(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"M/WK":function(s,a){s.exports=[{file:"README.md",lang:"md",section:"default",code:'<p>When we built the first version of the renderer we mentioned that it\ndoes not handle <code>FormArray</code> and <code>FormGroup</code>. If we try to create a \ndynamic form using the updated <code>Hero</code> model the new properties we added\nwill not render.</p>\n<p>Let&#39;s start with the most basic implementation, refactor the template\nof our renderer:</p>\n<p>Array is a container and it will also reflect in the UI, we can&#39;t use\nthe current control template, we need a specific one for arrays.</p>\n<p>Changing the first line so it will not render if it is an array. </p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">"item.type"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n</code></pre>\n<p>Becomes</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"!item.isArray"</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">"item.type"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n</code></pre>\n<p>And now the array implementation:</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"!item.isArray"</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">"item.type"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- NO CHANGE FROM PREVIOUS VERSION --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"item.isArray"</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"fGroup"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">formArrayName</span>]=<span class="hljs-string">"item.name"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">forFormArray</span>=<span class="hljs-string">"let c of fArray; tdmForm: tdmForm; fGroup: fGroup; item: item"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form-row</span> [<span class="hljs-attr">tdmForm</span>]=<span class="hljs-string">"c.tdmForm"</span> [<span class="hljs-attr">item</span>]=<span class="hljs-string">"c.item"</span> [<span class="hljs-attr">fGroup</span>]=<span class="hljs-string">"c.fGroup"</span> [<span class="hljs-attr">fArray</span>]=<span class="hljs-string">"c.fArray"</span> [<span class="hljs-attr">fControl</span>]=<span class="hljs-string">"c.fControl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"hasError(\'required\')"</span>&gt;</span>Required<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>Let&#39;s review it line by line</p>\n<p>we start with a container only rendering if it is an array and another\ncontainer with binding to the array instance.</p>\n<p>The 2nd container is not mandatory, the library provides the proper\ninformation so it is optional.</p>\n<p>Binding to a <code>[formGroup]</code> is is required if <code>[formArrayName]</code> is used!</p>\n<p>It would be nice to do <code>[formArray]=fArray</code> but angular does not have a\ndirect <code>[formArray]</code> directive so we are referencing it by name.\nThis is why <code>[formGroup]</code> binding is mandatory with <code>[formArrayName]</code>.</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"item.isArray"</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"fGroup"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">formArrayName</span>]=<span class="hljs-string">"item.name"</span>&gt;</span>\n</code></pre>\n<p>Now, looping through each item in the array, we render it.</p>\n<pre class="lang-html"><code class="lang-html">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">forFormArray</span>=<span class="hljs-string">"let c of fArray; tdmForm: tdmForm; fGroup: fGroup; item: item"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">renderer-v3</span> [<span class="hljs-attr">tdmForm</span>]=<span class="hljs-string">"c.tdmForm"</span> [<span class="hljs-attr">item</span>]=<span class="hljs-string">"c.item"</span> [<span class="hljs-attr">fGroup</span>]=<span class="hljs-string">"c.fGroup"</span> [<span class="hljs-attr">fArray</span>]=<span class="hljs-string">"c.fArray"</span> [<span class="hljs-attr">fControl</span>]=<span class="hljs-string">"c.fControl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">renderer-v3</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>We want to loop over the controls in the <code>FormArray</code>, and for each\ncontrol we need it&#39;s matching <code>RenderInstruction</code> instance. <code>item</code> is\nnot the right instruction set, it belong to the array not to each item.</p>\n<p>This can be done in the template manually but &quot;lucky us&quot; the library\nprovides <code>ForFormArrayDirective</code> which is a specific iteration\ndirective on top of <code>ngFor</code>, it will do all the work for us and\ntransform the control into <code>DynamicControlRenderContext</code>. </p>\n<p>Once we have the collection of <code>DynamicControlRenderContext</code> we need to\nrender each of them which requires a recursive operation.</p>\n<p>One option is to create <code>&lt;ng-template&gt;</code>s within the template and use\n<code>ngTemplateOutlet</code> passing the context.</p>\n<p>Another is to define <code>@Input</code> for each of the properties on our renderer\nso we can use it in templates, we pick this approach because it allows\nre-using the renderer in other places, such as local custom overrides. </p>\n<h4><a id="few-things-to-note" class="anchor" href="#few-things-to-note"><span class="header-link"></span></a>Few things to note</h4><ul>\n<li>This is a generic list of controls, it will work well for primitives\nbut pretty bad for child forms.</li>\n<li>The <code>basesDestroyed</code> array, using <strong>flattening</strong> definition is useless.<br>It is hard to understand the boundaries between each instance in the UI.<br>We will refactor it to be a child model.</li>\n<li>The implementation does not support array actions, i.e. adding,\nremoving or moving items in the array</li>\n</ul>\n<p>We will address these issues and others.</p>\n<div class="info">\n  This is a basic implementation, you can extend by using <code>[ngSwitch]</code>\n  or other flow control styles and support various scenarios either by\n  type or by custom <code>data</code> \n</div>'},{file:"array-renderer.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./model\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-array-renderer\'</span>,\n  templateUrl: <span class="hljs-string">\'./array-renderer.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./array-renderer.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayRendererComponent {\n  model: Hero;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">this</span>.model = <span class="hljs-keyword">new</span> Hero();\n    <span class="hljs-keyword">this</span>.model.allies = [<span class="hljs-string">\'Thor\'</span>, <span class="hljs-string">\'Captain America\'</span>];\n    <span class="hljs-keyword">this</span>.model.basesDestroyed = [\n      {\n        name: <span class="hljs-string">\'Bat Cave\'</span>,\n        coordinates: {\n          lng: <span class="hljs-number">10</span>,\n          lat: <span class="hljs-number">-10</span>\n        }\n      },\n      {\n        name: <span class="hljs-string">\'Themyscira\'</span>,\n        coordinates: {\n          lng: <span class="hljs-number">99</span>,\n          lat: <span class="hljs-number">-99</span>\n        }\n      }\n    ];\n  }\n}\n',title:"Component"},{file:"array-renderer.component.html",lang:"html",section:"tdmDemo",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'allies\', \'basesDestroyed\']"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab-group</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Allies"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">slaveOf</span>]=<span class="hljs-string">"dynForm"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'allies\']"</span> <span class="hljs-attr">filterMode</span>=<span class="hljs-string">"include"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Bases Destroyed"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">slaveOf</span>]=<span class="hljs-string">"dynForm"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'basesDestroyed\']"</span> <span class="hljs-attr">filterMode</span>=<span class="hljs-string">"include"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"primary"</span>\n          [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"dynForm.form.status !== \'VALID\' || !dynForm.form.dirty"</span>\n          (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.tdmForm.commitToModel(true)"</span>&gt;</span>SAVE<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"dynForm.form.pristine"</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.tdmForm.reset()"</span>&gt;</span>CANCEL<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>',title:"Template"},{file:"array-renderer.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"renderer-v4.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component, Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup, FormArray, FormControl } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { RenderInstruction, TDMModelForm, DynamicControlRenderContext } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'renderer-v4\'</span>,\n  templateUrl: <span class="hljs-string">\'./renderer-v4.component.html\'</span>,\n  styleUrls: [<span class="hljs-string">\'./renderer-v4.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> RendererV4Component <span class="hljs-keyword">implements</span> DynamicControlRenderContext {\n  <span class="hljs-meta">@Input</span>() item: RenderInstruction;\n  <span class="hljs-meta">@Input</span>() tdmForm: TDMModelForm&lt;<span class="hljs-built_in">any</span>&gt;;\n  <span class="hljs-meta">@Input</span>() fArray: FormArray | <span class="hljs-literal">undefined</span>;\n  <span class="hljs-meta">@Input</span>() fControl: FormControl | <span class="hljs-literal">undefined</span>;\n  <span class="hljs-meta">@Input</span>() fGroup: FormGroup | <span class="hljs-literal">undefined</span>;\n\n  externalTdmForm: TDMModelForm&lt;<span class="hljs-built_in">any</span>&gt;;\n\n  editChildFrom(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.externalTdmForm) {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.fControl.value === <span class="hljs-literal">null</span>) {\n        <span class="hljs-keyword">this</span>.fControl = &lt;<span class="hljs-built_in">any</span>&gt; <span class="hljs-keyword">this</span>.tdmForm.createControl(<span class="hljs-keyword">this</span>.item.fullName, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);\n        <span class="hljs-keyword">this</span>.fGroup.setControl(<span class="hljs-keyword">this</span>.item.name, <span class="hljs-keyword">this</span>.fControl);\n      }\n\n      <span class="hljs-keyword">this</span>.externalTdmForm = <span class="hljs-keyword">this</span>.tdmForm.createChildForm(<span class="hljs-keyword">this</span>.item.fullName, <span class="hljs-keyword">this</span>.fControl.value, &lt;<span class="hljs-built_in">any</span>&gt; <span class="hljs-keyword">this</span>.fControl);\n    }\n  }\n\n  hasError(errorName: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span> {\n    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>.fControl ) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fControl.hasError(errorName);\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>.fArray ) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fArray.hasError(errorName);\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>.fGroup ) {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fGroup.hasError(errorName);\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n  }\n}\n',title:"Array Renderer Class"},{file:"renderer-v4.component.html",lang:"html",section:"default",code:'<span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"!item.isArray; else FormArray"</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">"item.vType"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'boolean\'"</span>\n                [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>{{ item.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-slide-toggle</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'slideToggle\'"</span>\n                    [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>{{ item.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-slide-toggle</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'slider\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-slider</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n                <span class="hljs-attr">thumbLabel</span>=<span class="hljs-string">"true"</span>\n                [<span class="hljs-attr">tickInterval</span>]=<span class="hljs-string">"1"</span>\n                [<span class="hljs-attr">min</span>]=<span class="hljs-string">"item.data?.min"</span> [<span class="hljs-attr">max</span>]=<span class="hljs-string">"item.data?.max"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-slider</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'radio\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'radio\'"</span>\n                     [<span class="hljs-attr">class.vertical-mat-radio-group</span>]=<span class="hljs-string">"item.data?.vertical"</span>\n                     [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let sel of item.data.options"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"sel.value"</span>&gt;</span>{{sel.label || sel.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"hasError(\'required\')"</span>&gt;</span>Required<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'select\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n                [<span class="hljs-attr">placeholder</span>]=<span class="hljs-string">"item.label"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let sel of item.data.options"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"sel.value"</span>&gt;</span>{{sel.label || sel.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"hasError(\'required\')"</span>&gt;</span>Required<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'form\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"editChildFrom()"</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{fGroup.get(item.name + \'.\' + item.identity)?.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"externalTdmForm"</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"externalTdmForm"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngSwitchDefault</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span>\n           [<span class="hljs-attr">type</span>]=<span class="hljs-string">"item.vType"</span>\n           [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n           [<span class="hljs-attr">placeholder</span>]=<span class="hljs-string">"item.label"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"hasError(\'required\')"</span>&gt;</span>Required<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">FormArray</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"item.isArray"</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"fGroup"</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n    <span class="hljs-comment">&lt;!--&lt;dynamic-form-array [formArrayName]="item.name"--&gt;</span>\n    <span class="hljs-comment">&lt;!--[tdmForm]="tdmForm"--&gt;</span>\n    <span class="hljs-comment">&lt;!--[fGroup]="fGroup"--&gt;</span>\n    <span class="hljs-comment">&lt;!--[fArray]="fArray"--&gt;</span>\n    <span class="hljs-comment">&lt;!--[item]="item"&gt;--&gt;</span>\n    <span class="hljs-comment">&lt;!--&lt;/dynamic-form-array&gt;--&gt;</span>\n\n    <span class="hljs-comment">&lt;!--&lt;div [formArrayName]="item.name"&gt;--&gt;</span>\n    <span class="hljs-comment">&lt;!--&lt;ng-container *dynamicFormArray="let ctx; tdmForm: tdmForm; fGroup: fGroup; fArray: fArray; item: item"&gt;&lt;/ng-container&gt;--&gt;</span>\n    <span class="hljs-comment">&lt;!--&lt;/div&gt;--&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">formArrayName</span>]=<span class="hljs-string">"item.name"</span> &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">forFormArray</span>=<span class="hljs-string">"let c of fArray; tdmForm: tdmForm; fGroup: fGroup; item: item"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">renderer-v4</span> [<span class="hljs-attr">tdmForm</span>]=<span class="hljs-string">"c.tdmForm"</span> [<span class="hljs-attr">item</span>]=<span class="hljs-string">"c.item"</span> [<span class="hljs-attr">fGroup</span>]=<span class="hljs-string">"c.fGroup"</span> [<span class="hljs-attr">fArray</span>]=<span class="hljs-string">"c.fArray"</span> [<span class="hljs-attr">fControl</span>]=<span class="hljs-string">"c.fControl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">renderer-v4</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"hasError(\'required\')"</span>&gt;</span>Required<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n',title:"Array Renderer Template"},{file:"renderer-v4.component.scss",lang:"scss",section:"default",code:'mat-selection-list {\n  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">250px</span>;\n}\n\nmat-radio-group {\n  <span class="hljs-comment">// setting the padding here instead of in the dyn-form-element-container to support ripple animation</span>\n  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">25px</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">flex-direction</span>: row;\n  <span class="hljs-attribute">flex-wrap</span>: wrap;\n\n  mat-radio-<span class="hljs-selector-tag">button</span>:not(<span class="hljs-selector-class">.vertical-mat-radio-group</span>) {\n    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;\n  }\n\n  &amp;<span class="hljs-selector-class">.vertical-mat-radio-group</span> {\n    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>; <span class="hljs-comment">// required in case there\'s a scroll</span>\n    <span class="hljs-attribute">overflow-x</span>: visible;\n    <span class="hljs-attribute">overflow-y</span>: auto;\n    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">200px</span>;\n    <span class="hljs-attribute">display</span>: inline-flex;\n    <span class="hljs-attribute">flex-direction</span>: column;\n    <span class="hljs-attribute">flex-wrap</span>: nowrap;\n  }\n}\n',title:"Array Renderer Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          options: [\n              { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n              { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n              { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n              { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloaning\'</span> },\n              { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      flatten: {\n        name: {\n          required: <span class="hljs-literal">true</span>,\n          render: {\n            vType: <span class="hljs-string">\'text\'</span>,\n            label: <span class="hljs-string">\'Base Name\'</span>,\n          }\n        },\n        coordinates: {\n          flatten: {\n            lng: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Longitude\'</span>\n              }\n            },\n            lat: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Latitude\'</span>\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  base: {\n    name: <span class="hljs-built_in">string</span>;\n    coordinates: {\n      lng: <span class="hljs-built_in">number</span>;\n      lat: <span class="hljs-built_in">number</span>;\n    }\n  };\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Allies\'</span>\n      }\n    }\n  })\n  allies: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'none\'</span>,\n        label: <span class="hljs-string">\'Bases Destroyed\'</span>,\n        identity: <span class="hljs-string">\'name\'</span>\n      },\n      flatten: {\n        name: {\n          required: <span class="hljs-literal">true</span>,\n          render: {\n            vType: <span class="hljs-string">\'text\'</span>,\n            label: <span class="hljs-string">\'Base Name\'</span>,\n          }\n        },\n        coordinates: {\n          flatten: {\n            lng: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Longitude\'</span>\n              }\n            },\n            lat: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Latitude\'</span>\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  basesDestroyed: <span class="hljs-built_in">Array</span>&lt;{\n    name: <span class="hljs-built_in">string</span>;\n    coordinates: {\n      lng: <span class="hljs-built_in">number</span>;\n      lat: <span class="hljs-built_in">number</span>;\n    }\n  }&gt;;\n}\n',title:"Model"}]}}]);