(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"AQ+J":function(s,a){s.exports=[{file:"README.md",lang:"md",section:"part1",code:'<h1><a id="local-override" class="anchor" href="#local-override"><span class="header-link"></span></a>Local Override</h1><p>A dynamic form component will render a form control using the default\nrenderer it has access to.</p>\n<p>There are scenarios where a custom implementation is required, locally\nfor a specific dynamic form.</p>\n<p>The library supports that using local custom templates.</p>\n<h2><a id="custom-templates" class="anchor" href="#custom-templates"><span class="header-link"></span></a>Custom Templates</h2><p>A local custom template is an instance of \n<code>TemplateRef&lt;DynamicControlRenderContext&gt;</code>.</p>\n<p>The context of the template is <code>DynamicControlRenderContext</code> which is the\nexact context available to the <strong>renderer</strong>. </p>\n<p>A local custom template instance contains query information that is used\nto pair it with one or more controls. When a control is matched it will\nrender using the custom template and not the default renderer.</p>\n<h2><a id="custom-template-query" class="anchor" href="#custom-template-query"><span class="header-link"></span></a>Custom Template Query</h2><p>By default a local custom template will <strong>never match with a control</strong>.</p>\n<p>The local custom templates should be defined with the parameters for the\nquery, there are 2:</p>\n<ol>\n<li><strong>One or more control names/paths</strong><br>Can be a string or an array of string.</li>\n<li><strong>One or more visual types</strong><br>Can be a visual type or an array of visual types.</li>\n</ol>\n<p>You can combine one of the parameters or both.</p>\n<h3><a id="catch-all" class="anchor" href="#catch-all"><span class="header-link"></span></a>Catch all</h3><p>The query can be set to match all controls, this is done by setting\nthe control name to the string value <code>*</code>.</p>\n<p>You can apply a default renderer for an entire visual type/s by setting\ncatch all and a visual type.</p>\n<p>When catch all is set without setting a visual type parameter the\ntemplate will be used as the default rendering template for the entire\ndynamic form, i.e. the default renderer will not be used.</p>\n<h2><a id="using-local-custom-templates" class="anchor" href="#using-local-custom-templates"><span class="header-link"></span></a>Using local custom templates</h2><p>There are 2 ways you can assign a local custom template, declarative\nusing a directive and imperative using the API of <code>DynamicFormComponent</code></p>\n<h3><a id="declarative" class="anchor" href="#declarative"><span class="header-link"></span></a>Declarative</h3><p>Defining a local custom template inside a template is done using the\nstructural directive <code>DynamicFormOverrideDirective</code>.</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  *<span class="hljs-attr">dynamicFormOverride</span>=<span class="hljs-string">"\'name\'; let ctx"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- LOCAL IMPLEMENTATION --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n</code></pre>\n<p>In the example above we assign the local custom template to the field\n<code>name</code>, the template&#39;s lifespan is the lifespan of the dynamic form that\nis the host of the template.</p>\n<p>The context (<strong>ctx</strong> in the template above) for the template is the\nsame context assigned to the <strong>renderer</strong>, <code>DynamicControlRenderContext</code></p>\n<p>To create a default local custom template use <code>*</code> as the key:</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  *<span class="hljs-attr">dynamicFormOverride</span>=<span class="hljs-string">"\'*\'; let ctx"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- LOCAL IMPLEMENTATION --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n</code></pre>\n<p>This time the template apply to all fields.</p>\n<p>In the following example we define 2 overrides.</p>\n<ol>\n<li><p>The <code>name</code> field is replaced with a local\ncustom override. Instead of an <code>input</code> element an <code>auto-complete</code>\nelement, with predefined names, is used.</p>\n</li>\n<li><p>The visual types <strong>slideToggle</strong> and <strong>boolean</strong> will now render as\na button toggle group component.</p>\n</li>\n</ol>\n'},{file:"README.md",lang:"md",section:"part2",code:'<h3><a id="imperative" class="anchor" href="#imperative"><span class="header-link"></span></a>Imperative</h3><p>Local custom templates can also be set using the dynamic component API.</p>\n<p>Get a hold of the <code>DynamicFormComponent</code> instance and a <code>TemplateRef</code> \ninstance and use <code>DynamicFormComponent.addOverride()</code> method.</p>\n<p>You can use any <code>TemplateRef&lt;DynamicControlRenderContext&gt;</code>.</p>\n<p>The following example is a nice demonstration of a &quot;control-less&quot; form\nthat shows the form as readonly html elements. The local custom template\nin this case is a default custom template (<code>*</code>) the will apply to all\nfields.</p>\n<p>This form is a slave of the form in the previous example.</p>\n<p>Because it is a slave it is bound to the same form as the master,\ntry changing values in the form on the top.</p>\n'},{file:"README.md",lang:"md",section:"part3",code:'<h2><a id="precedence" class="anchor" href="#precedence"><span class="header-link"></span></a>Precedence</h2><p> The following represents the precedence when choosing how to render:</p>\n<ol>\n<li>Specific local custom template</li>\n<li>Default local custom template</li>\n<li>Default renderer</li>\n</ol>\n'},{file:"local-override.component.ts",lang:"ts",section:"tdmModel",code:'<span class="hljs-keyword">import</span> { Component, ViewChild, TemplateRef, AfterViewInit } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { DynamicFormComponent, DynamicFormOverrideContext } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../4-element-metadata\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-local-override\'</span>,\n  templateUrl: <span class="hljs-string">\'./local-override.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./local-override.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LocalOverrideComponent <span class="hljs-keyword">implements</span> AfterViewInit {\n  model = <span class="hljs-keyword">new</span> Hero();\n\n}\n',title:"Component"},{file:"local-override.component.html",lang:"html",section:"tdmModel",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynFormMaster</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">dynamicFormOverride</span>=<span class="hljs-string">"\'*\'; let ctx; vType: [\'boolean\', \'slideToggle\']"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form-row</span> [<span class="hljs-attr">fromContext</span>]=<span class="hljs-string">"ctx"</span> <span class="hljs-attr">custom</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-button-toggle-group</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"ctx.fControl"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-button-toggle</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"true"</span>&gt;</span>YES<span class="hljs-tag">&lt;/<span class="hljs-name">mat-button-toggle</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-button-toggle</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"false"</span>&gt;</span>NO<span class="hljs-tag">&lt;/<span class="hljs-name">mat-button-toggle</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">mat-button-toggle-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">dynamicFormOverride</span>=<span class="hljs-string">"\'name\'; let ctx"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form-row</span> [<span class="hljs-attr">fromContext</span>]=<span class="hljs-string">"ctx"</span> <span class="hljs-attr">custom</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"ctx.fControl"</span> [<span class="hljs-attr">matAutocomplete</span>]=<span class="hljs-string">"auto"</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-autocomplete</span> #<span class="hljs-attr">auto</span>=<span class="hljs-string">"matAutocomplete"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"batman"</span>&gt;</span>Bat Man<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"superman"</span>&gt;</span>Super Man<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"spiderman"</span>&gt;</span>Spider Man<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"thor"</span>&gt;</span>Thor<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"wonderwomen"</span>&gt;</span>Wonder Women<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"captainamerica"</span>&gt;</span>Captain America<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">mat-autocomplete</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"local-override.component.ts",lang:"ts",section:"tdmModel2",code:'<span class="hljs-keyword">import</span> { Component, ViewChild, TemplateRef, AfterViewInit } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { DynamicFormComponent, DynamicFormOverrideContext } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../4-element-metadata\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-local-override\'</span>,\n  templateUrl: <span class="hljs-string">\'./local-override.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./local-override.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LocalOverrideComponent <span class="hljs-keyword">implements</span> AfterViewInit {\n  model = <span class="hljs-keyword">new</span> Hero();\n\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'dynFormCustomOverride\'</span>)\n  dynFormCustomOverride: DynamicFormComponent;\n\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'defaultFieldOverrideTpl\'</span>, { read: TemplateRef })\n  defaultFieldOverrideTpl: TemplateRef&lt;DynamicFormOverrideContext&gt;;\n\n  ngAfterViewInit(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">this</span>.dynFormCustomOverride.addOverride({ controlName: <span class="hljs-string">\'*\'</span> }, <span class="hljs-keyword">this</span>.defaultFieldOverrideTpl, <span class="hljs-literal">true</span>);\n  }\n}\n',title:"Component"},{file:"local-override.component.html",lang:"html",section:"tdmModel2",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynFormCustomOverride</span> [<span class="hljs-attr">slaveOf</span>]=<span class="hljs-string">"dynFormMaster"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">defaultFieldOverrideTpl</span> <span class="hljs-attr">let-ctx</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: inline-block; min-width: 200px"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ctx.item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{ctx.tdmForm.getValue(ctx.item.getRuntimePath(ctx.fControl)) || \'Not Set\'}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>',title:"Template"},{file:"local-override.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'date\'</span>,\n        label: <span class="hljs-string">\'Hero Birth\'</span>\n      }\n    }\n  })\n  birth: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n            { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n            { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n            { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloning\'</span> },\n            { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Hobbies\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            <span class="hljs-string">\'Baseball\'</span>,\n            <span class="hljs-string">\'Basketball\'</span>,\n            <span class="hljs-string">\'Buildi\'</span>,\n            <span class="hljs-string">\'Cosplay\'</span>,\n            <span class="hljs-string">\'Soccer\'</span>,\n            <span class="hljs-string">\'Spelunkering\'</span>,\n            <span class="hljs-string">\'Storm Chasing\'</span>,\n            <span class="hljs-string">\'Wrestling\'</span>,\n            <span class="hljs-string">\'Writing\'</span>,\n            <span class="hljs-string">\'Yoga\'</span>\n          ].map( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> ({value})),\n        }\n      }\n    }\n  })\n  hobbies: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>&gt;;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'chips\'</span>,\n        label: <span class="hljs-string">\'Chips\'</span>,\n        data: {\n          removable: <span class="hljs-literal">true</span>,\n          addOnBlur: <span class="hljs-literal">true</span>,\n        }\n      }\n    }\n  })\n  chips: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'textarea\'</span>,\n        label: <span class="hljs-string">\'Bio\'</span>,\n        data: {\n          autoSize: <span class="hljs-literal">false</span>,\n          minRows: <span class="hljs-number">3</span>,\n          maxRows: <span class="hljs-number">5</span>\n        }\n      }\n    }\n  })\n  bio: <span class="hljs-built_in">string</span>;\n}\n',title:"Model"}]}}]);