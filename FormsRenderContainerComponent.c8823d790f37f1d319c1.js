(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{RXzq:function(s,n){s.exports=[{file:"README.md",lang:"md",section:"part1",code:'<h1><a id="render-container" class="anchor" href="#render-container"><span class="header-link"></span></a>Render Container</h1><p>The library prepares the controls for rendering, each control is then\nused to create an instance of the renderer, a single component that the\nlibrary add to the view.</p>\n<p>The renderer implementation we are currently using does not apply style\non it&#39;s host an so the host&#39;s layout flow is inline, i.e. each control\nis rendered inline.</p>\n<p>We can control the flow using CSS  or we can wrap the renderer with\nour own renderer and control the styles there.</p>\n<p>We will go with the 2nd option, wrapping the original form will give us\nmore control over the layout.</p>\n<h2><a id="materialformcontrolrenderer" class="anchor" href="#materialformcontrolrenderer"><span class="header-link"></span></a>MaterialFormControlRenderer</h2><p>The renderer we currently use does not apply layout to the components\nit renders, this allows flexibility between inline and blocking controls.</p>\n<p><code>MaterialFormControlRenderer</code> expose properties using <code>@Input()</code> so we\ncan use it in templates.</p>\n<p>The renderer also implements labels as placeholders, where available and\nallow to switch of labels using the <code>@Input()</code> property <strong>showLabels</strong></p>\n<p>We will use this feature to render labels inline, left to the control\ninstead of placeholders.</p>\n<h2><a id="dynamicformrowcomponent" class="anchor" href="#dynamicformrowcomponent"><span class="header-link"></span></a>DynamicFormRowComponent</h2><p>We call the new renderer <code>DynamicFormRowComponent</code>, before we jump into\nthe implementation let&#39;s describe what we are going to implement: </p>\n<ol>\n<li><p>The renderer will use a flex layout creating 2 columns, left column\nfor the label and the right column for the control.</p>\n</li>\n<li><p><code>MaterialFormControlRenderer</code> is used inside the right column with\nthe <code>showLabels</code> set to false</p>\n</li>\n<li><p><code>DynamicFormRowComponent</code> will also expose it&#39;s interface as\n<code>@Input()</code> so it can be used by other templates.</p>\n</li>\n<li><p>The property <strong>custom</strong> is exposed (also as <code>@Input()</code>) which when\nset to true will not use <code>MaterialFormControlRenderer</code> to render\nthe control, instead it will show the content project into it.</p>\n</li>\n</ol>\n<p>Bullet 3 &amp; 4 are important they will allow us to use local overrides to\nrender custom controls without breaking the layout, we will re-use this\nrenderer as provide the implementation as projected content.</p>\n<p>Let&#39;s jump into the implementation followed by an example:</p>\n'},{file:"README.md",lang:"md",section:"part2",code:'<h2><a id="registering-a-new-renderer" class="anchor" href="#registering-a-new-renderer"><span class="header-link"></span></a>Registering a new renderer</h2><p>We are still running in the same angular application, the default\nrenderer registered did not change and if we leave the configuration\nas is <code>MaterialFormControlRenderer</code> will be used.</p>\n<p>To set <code>DynamicFormRowComponent</code> as the default renderer we need to\ncreate a new provider configuration and set it in the <code>providers</code> of\nthe current component we use to show this page</p>\n<pre class="lang-ts"><code class="lang-ts">providers: [\n  { provide: FORM_CONTROL_COMPONENT, useValue: DynamicFormRowComponent }\n]\n</code></pre>\n<p>You can also see it in the source code view. </p>\n'},{file:"dynamic-form-row.component.html",lang:"html",section:"default",code:'<span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">style.display</span>]=<span class="hljs-string">"item.hidden ? \'none\' : undefined"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">fxLayout</span>=<span class="hljs-string">"row"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dyn-form-row"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">fxFlex</span>=<span class="hljs-string">"0 1 50%"</span> <span class="hljs-attr">fxLayoutAlign</span>=<span class="hljs-string">"end center"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dyn-form-label"</span> &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"item.required"</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">fxFlex</span>=<span class="hljs-string">"0 1 50%"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dyn-form-element-container dyn-form-element-container-{{item.vType}}"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">material-form-control-renderer</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"!custom"</span>\n                                      <span class="hljs-attr">showLabels</span>=<span class="hljs-string">"false"</span>\n                                      [<span class="hljs-attr">dynForm</span>]=<span class="hljs-string">"dynForm"</span>\n                                      [<span class="hljs-attr">tdmForm</span>]=<span class="hljs-string">"tdmForm"</span>\n                                      [<span class="hljs-attr">fArray</span>]=<span class="hljs-string">"fArray"</span>\n                                      [<span class="hljs-attr">fControl</span>]=<span class="hljs-string">"fControl"</span>\n                                      [<span class="hljs-attr">fGroup</span>]=<span class="hljs-string">"fGroup"</span>\n                                      [<span class="hljs-attr">item</span>]=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">material-form-control-renderer</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n',title:"Renderer Container - Template"},{file:"dynamic-form-row.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { ChangeDetectionStrategy, ViewEncapsulation, Component, Input, SimpleChanges, OnChanges } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup, FormArray, FormControl } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> {\n  DynamicFormComponent,\n  RenderInstruction,\n  TDMModelForm,\n  DynamicControlRenderContext\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { coerceBooleanProperty } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/cdk/coercion\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'dynamic-form-row\'</span>,\n  templateUrl: <span class="hljs-string">\'./dynamic-form-row.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./dynamic-form-row.component.scss\'</span> ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DynamicFormRowComponent <span class="hljs-keyword">implements</span> DynamicControlRenderContext, OnChanges {\n  <span class="hljs-meta">@Input</span>() custom: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-meta">@Input</span>() dynForm: DynamicFormComponent;\n  <span class="hljs-meta">@Input</span>() item: RenderInstruction;\n  <span class="hljs-meta">@Input</span>() tdmForm: TDMModelForm&lt;<span class="hljs-built_in">any</span>&gt;;\n\n  <span class="hljs-meta">@Input</span>() fArray: FormArray | <span class="hljs-literal">undefined</span>;\n  <span class="hljs-meta">@Input</span>() fControl: FormControl | <span class="hljs-literal">undefined</span>;\n  <span class="hljs-meta">@Input</span>() fGroup: FormGroup | <span class="hljs-literal">undefined</span>;\n\n  <span class="hljs-comment">/**\n   * Allows setting the context using `DynamicControlRenderContext` directly.\n   */</span>\n  <span class="hljs-meta">@Input</span>()\n  <span class="hljs-keyword">set</span> fromContext(value: DynamicControlRenderContext) {\n    <span class="hljs-keyword">if</span> ( value ) {\n      <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>, value);\n    }\n  }\n\n  ngOnChanges(change: SimpleChanges): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">if</span> ( <span class="hljs-string">\'custom\'</span> <span class="hljs-keyword">in</span> change ) {\n      <span class="hljs-keyword">this</span>.custom = coerceBooleanProperty(<span class="hljs-keyword">this</span>.custom);\n    }\n  }\n}\n',title:"Renderer Container - Component"},{file:"render-container.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FORM_CONTROL_COMPONENT } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../4-element-metadata\'</span>;\n<span class="hljs-keyword">import</span> { DynamicFormRowComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./renderer/dynamic-form-row.component\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-render-container\'</span>,\n  templateUrl: <span class="hljs-string">\'./render-container.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./render-container.component.scss\'</span> ],\n  providers: [\n    { provide: FORM_CONTROL_COMPONENT, useValue: DynamicFormRowComponent }\n  ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> RenderContainerComponent {\n\n  model = <span class="hljs-keyword">new</span> Hero();\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">this</span>.model.bmi = <span class="hljs-number">25</span>;\n    <span class="hljs-keyword">this</span>.model.name = <span class="hljs-string">\'Bat Man\'</span>;\n    <span class="hljs-keyword">this</span>.model.doubleAgent = <span class="hljs-literal">true</span>;\n  }\n\n}\n',title:"Component"},{file:"render-container.component.html",lang:"html",section:"tdmDemo",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'date\'</span>,\n        label: <span class="hljs-string">\'Hero Birth\'</span>\n      }\n    }\n  })\n  birth: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n            { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n            { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n            { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloning\'</span> },\n            { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Hobbies\'</span>,\n        data: {\n          multiple: <span class="hljs-literal">true</span>,\n          options: [\n            <span class="hljs-string">\'Baseball\'</span>,\n            <span class="hljs-string">\'Basketball\'</span>,\n            <span class="hljs-string">\'Buildi\'</span>,\n            <span class="hljs-string">\'Cosplay\'</span>,\n            <span class="hljs-string">\'Soccer\'</span>,\n            <span class="hljs-string">\'Spelunkering\'</span>,\n            <span class="hljs-string">\'Storm Chasing\'</span>,\n            <span class="hljs-string">\'Wrestling\'</span>,\n            <span class="hljs-string">\'Writing\'</span>,\n            <span class="hljs-string">\'Yoga\'</span>\n          ].map( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> ({value})),\n        }\n      }\n    }\n  })\n  hobbies: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>&gt;;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      forceObjectType: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'chips\'</span>,\n        label: <span class="hljs-string">\'Chips\'</span>,\n        data: {\n          removable: <span class="hljs-literal">true</span>,\n          addOnBlur: <span class="hljs-literal">true</span>,\n        }\n      }\n    }\n  })\n  chips: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'textarea\'</span>,\n        label: <span class="hljs-string">\'Bio\'</span>,\n        data: {\n          autoSize: <span class="hljs-literal">false</span>,\n          minRows: <span class="hljs-number">3</span>,\n          maxRows: <span class="hljs-number">5</span>\n        }\n      }\n    }\n  })\n  bio: <span class="hljs-built_in">string</span>;\n}\n',title:"Model"}]}}]);