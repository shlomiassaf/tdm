(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{C1IG:function(n,e){n.exports=[{file:"README.md",lang:"md",section:"PART-1",code:'<h1><a id="options" class="anchor" href="#options"><span class="header-link"></span></a>Options</h1><p>When we talk about <em>Options</em> we talk about:</p>\n<ul>\n<li>Library specific request options</li>\n<li>XHR request options</li>\n</ul>\n<p>The common for both is that they both refer to a <strong>request</strong>,\ni.e. options are request specific.</p>\n<p>Starting with an example, we want to find a <code>Customer</code> by <strong>id</strong>:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">this</span>.ngDao.get(Customer).findById(<span class="hljs-string">\'ALFKI\'</span>);\n</code></pre>\n<p>Which will send a <code>GET</code> call to:</p>\n<pre><code>/api/customers/ALFKI\n</code></pre><p>Now, same thing but we want to add a query string parameter of some\nsort...</p>\n',title:"Options"},{file:"README.md",lang:"md",section:"PART-2",code:'<p><br>\nTo add query string parameters we need to provide <strong>ad-hoc</strong> options\nobject with the url parameters we want to include.</p>\n<p>Run the example and look at url in the <em>Request</em> object.</p>\n<ul>\n<li><strong>Ad-hoc</strong> options are options provided with the execution of a\nrequest.</li>\n<li>Each of the built in methods in the DAO accepts an optional\n<em>options</em> object.</li>\n<li><strong>Ad-hoc</strong> options have top-most priority, they will override any\nother predefined configuration.</li>\n<li><strong>Ad-hoc</strong> options are best used for call specific parameters, things\nlike query strings, search API integration etc...</li>\n<li>The library will merge <strong>ad-hoc</strong> options with <strong>static</strong> options\nand use the resolved options object.</li>\n</ul>\n<div class="info">\nBeside <strong>ad-hoc</strong>, there are <strong>static</strong> options. These are set through\nmetadata when defining the resource / action. We will cover them next.\n</div>\n\n\n\n\n\n<h3><a id="static-options" class="anchor" href="#static-options"><span class="header-link"></span></a>Static options</h3><p>Beside <strong>ad-hoc</strong> options, there are <strong>static options</strong> set at 3 levels:</p>\n<ul>\n<li>Module Level\nWhat we set in <code>HttpDefaultConfig</code></li>\n<li>Resource Level\nWhat we set in the metadata in <code>@HttpResource(/* metadata */)</code></li>\n<li>Action Level</li>\n</ul>\n<p>Resolving an option, the library will see if it is set in the <strong>ad-hoc</strong>\noptions, if not it will check in the <strong>Action</strong>, then <strong>Resource</strong> and\nfinally take it from <strong>Module</strong>.</p>\n<p><strong>Ad-hoc</strong> options are set when we <strong>use</strong> the instance of a resource.\n<strong>Static</strong> options are set when we <strong>define</strong> a resource.</p>\n<div class="info">\n<strong>Action</strong> level options are used in Custom Actions which is not covered\nin this chapter.\n</div>\n\n<h2><a id="a-set-of-common-options" class="anchor" href="#a-set-of-common-options"><span class="header-link"></span></a>A Set of common options</h2><p>There are several options that are valid to all calls, these are things\nlike headers, urls parameters, etc...</p>\n<p>They can be set on ad-hoc or static options, at any level.</p>\n<p>The <code>BaseHttpConfig</code> interface holds the definitions for a call we can\ndefine at all of the levels: module, resource, action and ad-hoc.</p>\n<h2><a id="an-code-httpclient-code-perspective" class="anchor" href="#an-code-httpclient-code-perspective"><span class="header-link"></span></a>An <code>HttpClient</code> perspective</h2><p>You probably know <code>HttpClient</code> well, let&#39;s try to explain the various\noptions through <code>HttpClient</code>:</p>\n<p>The following is the signature of the <code>delete</code> method in <code>HttpClient</code>:</p>\n<pre class="lang-ts"><code class="lang-ts">    <span class="hljs-keyword">delete</span>&lt;T&gt;(url: <span class="hljs-built_in">string</span>, options?: {\n        headers?: HttpHeaders | {\n            [header: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[];\n        };\n        observe?: <span class="hljs-string">\'body\'</span>;\n        params?: HttpParams | {\n            [param: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[];\n        };\n        reportProgress?: <span class="hljs-built_in">boolean</span>;\n        responseType?: <span class="hljs-string">\'json\'</span>;\n        withCredentials?: <span class="hljs-built_in">boolean</span>;\n    }): Observable&lt;T&gt;;\n</code></pre>\n<p>This is just 1 overload out of 15+</p>\n<p>We can see that it accepts 2 parameters: <strong>url</strong> and <strong>options</strong>.</p>\n<p><strong>url</strong> is mandatory, it must be set by the user.\nIn our setup the <strong>url</strong> is a <strong>static option</strong>, it is set by all 3\nstatic level option objects.</p>\n<p><strong>options</strong> is optional, it is equivilent to the <strong>ad-hoc</strong> options.<br>When not set or partially set, <code>HttpClient</code> will set the mandatory\nvalues internally. In our setup, when not set or partially set the\nlibrary will take the missing values from static options. Usually the\n<strong>Action</strong> definition has most of the missing options.</p>\n<p>Another feature of <code>HttpClient</code> is <strong>interceptors</strong>, which we can use\nto modify a request before it leaves. Again, a module level or resource\nlevel options object can work here and when more dynamic control is\nneeded you can always use interceptors.</p>\n',title:"Options"},{file:"options.component.ts",lang:"ts",section:"code",code:'<span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> ngDao: NgDAO</span>) {\r\n\r\n  ngDao.get(Customer).findById(<span class="hljs-string">\'ALFKI\'</span>, {\r\n    urlParams: {\r\n      someQueryKey: <span class="hljs-string">\'someQueryValue\'</span>\r\n    }\r\n  });\r\n\r\n}\r\n'}]}}]);