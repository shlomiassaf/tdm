(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{MKaG:function(n,e){n.exports=[{file:"README.md",lang:"md",section:"default",code:'<h2><a id="install" class="anchor" href="#install"><span class="header-link"></span></a>Install</h2><p>You can use either the npm or yarn command-line tool to install packages.\nUse whichever is appropriate for your project in the examples below.</p>\n<h4><a id="npm" class="anchor" href="#npm"><span class="header-link"></span></a>NPM</h4><pre class="lang-shell"><code class="lang-shell">npm install --save @tdm/ngx-http-client @tdm/tixin @tdm/core @tdm/data\n</code></pre>\n<h4><a id="yarn" class="anchor" href="#yarn"><span class="header-link"></span></a>Yarn</h4><pre class="lang-shell"><code class="lang-shell">yarn add @tdm/ngx-http-client @tdm/tixin @tdm/core @tdm/data\n</code></pre>\n<div class="info">\n  The library depends on 3 libraries from the <code>@tdm</code> framework.\n</div>\n\n<h2><a id="ngmodule-setup" class="anchor" href="#ngmodule-setup"><span class="header-link"></span></a>NgModule setup</h2><p>We&#39;re building a new app, our root module is called <code>NgxHttpFunAppModule</code></p>\n<p>We need to import <code>HttpClientResourceModule</code> and along with angular&#39;s\nhttp client:</p>\n<pre class="lang-ts"><code class="lang-ts">  <span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n  <span class="hljs-keyword">import</span> { HttpClientModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common/http\'</span>;\n  <span class="hljs-keyword">import</span> { HttpClientResourceModule, HttpDefaultConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-http-client\'</span>;\n\n  <span class="hljs-meta">@NgModule</span>({\n    ...\n    imports: [\n      HttpClientModule,\n      HttpClientResourceModule\n    ]\n    ...\n  })\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NgxHttpFunAppModule { }\n}\n</code></pre>\n<h2><a id="module-configuration" class="anchor" href="#module-configuration"><span class="header-link"></span></a>Module configuration</h2><p>The module comes with default configuration predefined so it works\nout of the box.</p>\n<p>You can provide configuration of your own to customize the behaviour\nand layout of the API.</p>\n<pre class="lang-ts"><code class="lang-ts">  <span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n  <span class="hljs-keyword">import</span> { HttpClientModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common/http\'</span>;\n  <span class="hljs-keyword">import</span> { HttpClientResourceModule, HttpDefaultConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-http-client\'</span>;\n\n  <span class="hljs-meta">@NgModule</span>({\n    ...\n    imports: [\n      HttpClientModule,\n      HttpClientResourceModule\n    ],\n    providers: [\n      {\n        provide: HttpDefaultConfig,\n        useValue: HttpDefaultConfig.create({ baseUrl: <span class="hljs-string">\'/api\'</span> })\n      }\n    ]\n    ...\n  })\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NgxHttpFunAppModule { }\n}\n</code></pre>\n<p>In the example above we&#39;ve added a base url to the API we work with, so\nevery model we define will have <code>/api/</code> added to the url.</p>\n<p>Notice how we use <code>HttpDefaultConfig.create</code> to setup a configuration,\nthis will ensure default values that we do not set are set to their\ndefaults.</p>\n<p>There are additional values that we can set, we will will cover them\nas we progress, for now <code>baseUrl</code> will suffice.</p>\n<div class="info">\nIf you wish to explore the options, have a look at <code>HttpDefaultConfig</code>.\n<br>\n<br>\nNote that most of the options are part of a cascading structure, where\n<code>HttpDefaultConfig</code> is the last to pick from, we will cover the\ncascading setup as we progress.\n</div>\n\n<h2><a id="httpdefaultconfig-and-angular-39-s-di" class="anchor" href="#httpdefaultconfig-and-angular-39-s-di"><span class="header-link"></span></a>HttpDefaultConfig and angular&#39;s DI</h2><p><code>HttpDefaultConfig</code> is an angular provider token, it means that child\n<code>NgModule</code>s might have a different instance then their parent, or even\na component might.</p>\n<p>The library has limited support for that, it is not recommended to apply\nmultiple setups in the same application.</p>\n<p>If you must, note that you can only define it on the module level and\nit will only work with DAO, ActiveRecord will not work.</p>\n',title:"Setup"}]}}]);