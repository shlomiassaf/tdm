(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{HLJt:function(s,n){s.exports=[{file:"README.md",lang:"md",section:"PART-1",code:'<h1><a id="tutorial-http-with-tdm" class="anchor" href="#tutorial-http-with-tdm"><span class="header-link"></span></a>Tutorial: HTTP with @tdm</h1><p>HTTP Resource is a bridge between your models and your REST API, using\nangular&#39;s <code>HttpClient</code>.</p>\n'},{file:"README.md",lang:"md",section:"PART-2",code:'<p>It is simple and intuitive, applying common conventions so you can start\nbuilding quickly but also highly <strong>extensible</strong> (via plugins) to cover\nall of your needs.</p>\n<p>Some terms:</p>\n<ul>\n<li><strong>Model</strong>: A class representing a structure</li>\n<li><strong>Action</strong>: An HTTP operation that the model supports (a.k.a operation)</li>\n<li><strong>Adapter</strong>: A logical unit that executes an <strong>Action</strong> on a <strong>Model</strong></li>\n<li><strong>Resource</strong>: A <strong>Model</strong> bound to an <strong>Adapter</strong> with mapped <strong>Actions</strong>. </li>\n<li><strong>Resource Control</strong>: An object bound to an instance of a <strong>Resource</strong>\nthat exists throughout the lifecycle of an <strong>Action</strong>, used for\ncontrolling the action (notifications, cancel, etc...)</li>\n</ul>\n<p>Don&#39;t worry about the terms, we will cover them in-depth later.</p>\n<h2><a id="data-access-object" class="anchor" href="#data-access-object"><span class="header-link"></span></a>Data Access Object</h2><p>HTTP Resource implements the <strong>Data Access Object Pattern</strong> (DAO) out of\nthe box, which allows full control over the model and actions.</p>\n<p>A data access object is used to invoke actions and also to listen to\naction notifications and control the resource using the resource control\nobject.</p>\n<h2><a id="active-record" class="anchor" href="#active-record"><span class="header-link"></span></a>Active Record</h2><p><strong>Active Record Pattern</strong> is supported by registering the active record\nplugin. The active record pattern is less pure, adding to the structure\nof your model but provides highly usable API, easy to work with and easy\nto control.</p>\n<p>Active record, combined with the <strong>rx-resource-control</strong> plugin, provide\nthe ultimate angular experience.</p>\n<div class="info">\nActive record comes with FULL type support embedded into the model.\n</div>\n\n<h2><a id="tutorial-structure" class="anchor" href="#tutorial-structure"><span class="header-link"></span></a>Tutorial Structure</h2><p>This tutorial is based on examples, each topic is covered by a relevant\nexample with source code attached.</p>\n<p>We will start with the most simple example and climb up to more complex\nscenarios.</p>\n<p>All of the examples are live and run within a small dashboard that\ndisplay&#39;s information and allow interaction with the running action,\nlet&#39;s see it in action.</p>\n<p>Click on the <strong>play</strong> button on the top-right corner to start:</p>\n'},{file:"README.md",lang:"md",section:"PART-3",code:'<p><br></p>\n<p>There are 3 areas of interest</p>\n<h3><a id="1-top-bar" class="anchor" href="#1-top-bar"><span class="header-link"></span></a>1. Top Bar</h3><p>The top bar display the title for the example, a LED indicator and a\nSTART / CANCEL button.</p>\n<h4><a id="start-cancel-button" class="anchor" href="#start-cancel-button"><span class="header-link"></span></a>Start / Cancel button</h4><p>The button is located at the right with a &quot;play arrow&quot; icon. When\nthe action is &quot;in-flight&quot; it turns into a stop button which cancel&#39;s the\naction.</p>\n<h4><a id="real-time-http-status-indicator-led-" class="anchor" href="#real-time-http-status-indicator-led-"><span class="header-link"></span></a>Real time HTTP status indicator LED.</h4><p>The LED is located at the top left, it is an indicator for the current\nor last known status reported.</p>\n'},{file:"README.md",lang:"md",section:"PART-4",code:'<h3><a id="2-requests" class="anchor" href="#2-requests"><span class="header-link"></span></a>2. Requests</h3><p>Located on the left, contains a list of requests with their status.\nClicking on a request will reveal the event&#39;s submitted by adapter for\nthat request. Clicking will also display the <strong>input</strong> / <strong>output</strong>\nvalues in the <em>main view</em>.</p>\n<div class="info">\nEvent&#39;s are part of the <strong>Resource Control</strong>\n</div>\n\n<h3><a id="3-main-view" class="anchor" href="#3-main-view"><span class="header-link"></span></a>3. Main view</h3><p>This is the main view, by default it will display code this example\nis executing. When a there is a selected request, it becomes a\ninput / output display, show the <strong>request</strong> object\n(input) used to create the HTTP call, and the output which may be one or\nmore of the following:</p>\n<ul>\n<li>Result (serialized)</li>\n<li>Error</li>\n<li>HTTP Response</li>\n</ul>\n<p>Clicking on a selected request will close it and show the code view\nagain.</p>\n<h4><a id="single-multi-file-code-view" class="anchor" href="#single-multi-file-code-view"><span class="header-link"></span></a>Single/Multi file code view</h4><p>When the example is based on a single file it will display in the main view as is, when the example is based on multiple\nfiles (component, template, styles...) it will display within tabs.</p>\n<h2><a id="demo-server" class="anchor" href="#demo-server"><span class="header-link"></span></a>Demo Server</h2><p>To demonstrate the capabilities and features of the library the examples\nin this tutorial perform all CRUD operations, custom actions and more...</p>\n<p>For the optimal learning experience it is always best if issue HTTP\ncalls to a server, real or mock, but a server. This will allow us to:</p>\n<ul>\n<li>Inspect XHR request/response in the DevTool</li>\n<li>Persist changes (for multi-call processes)</li>\n<li>Demonstrate complex scenarios</li>\n<li>and more...</li>\n</ul>\n<p>A simple mock is not enough, we want to mimic the entire process.</p>\n<p>A remote REST API is not an option (cost, maintenance, etc...).</p>\n<h3><a id="hello-serviceworker" class="anchor" href="#hello-serviceworker"><span class="header-link"></span></a>Hello ServiceWorker</h3><p>We chose to put the demo server inside a service worker, running\n<strong>in your browser</strong>. (npm: <code>service-mocker</code>)</p>\n<p>It is a an express like server, using a routing based middleware\nsolution, just like express.</p>\n<p>To persist data, we store it using using <strong>IndexDB</strong>. (npm: <code>localForage</code>)</p>\n<div class="alert">\nA delay of ~1000ms was deliberately added to most of the API calls in\nthe server.\n</div>\n\n<h3><a id="domain-model" class="anchor" href="#domain-model"><span class="header-link"></span></a>Domain Model</h3><p>The examples in this demo share a common domain model, based on the\n<strong>Northwind</strong> database.</p>\n<h2><a id="demo-server-in-depth" class="anchor" href="#demo-server-in-depth"><span class="header-link"></span></a>Demo Server In-Depth</h2><p>The server &amp; persistent layers in this demo are all based on <strong>@tdm</strong>\npackages, including packages built especially for this demo, the\nfollowing describes the server implementation in-depth, read it if you\nwant to understand the power of <strong>@tdm</strong>.</p>\n<hr>\n<p>The concept we used is very common, models represents tables on the\ndatabase, our persistent layer and controllers are used to expose an\nAPI to access these models, each controller represents a model. Inside\nthe controller, methods are used to expose endpoint and http verbs.</p>\n<p>Because the client and the server share the same domain model we are\nusing interfaces to create a contract between the 2. This is not\nmandatory and used here for reference.</p>\n<blockquote>\n<p>The source code for the server and client implementations, including\nsource code for the packages all exist in this repository</p>\n</blockquote>\n<h3><a id="server" class="anchor" href="#server"><span class="header-link"></span></a>Server</h3><p>The server is based on routing and middlewares, same concept as in\nan <strong>express</strong> server but with less features.</p>\n<p>The basic service worker setup, routing and registration is done by\nan external npm package called <strong>service-worker</strong>, which we can use\ndirectly but we want a server build with the same mindset,\na server we can build and configure with decorators and metadata.</p>\n<p>With that goal in mind we built <strong>@tdm/service-mocker</strong>, a package for\nbuilding class-based model/controller server inside a service worker\nusing an express like routing system.</p>\n<p><strong>@tdm/service-mocker</strong> wraps the <strong>service-worker</strong> package and expose\neasy to use building blocks (decorators) to quickly setup a server.</p>\n<p><strong>@tdm/service-mocker</strong> was built for this demo but it was crafted as\na package, allowing fully customization and control. It servers as great\nexample of how to use <strong>@tdm/core</strong> for other use-cases /solutions in\nthe browser or in node.</p>\n<p>The concept is not new, you can find express implementation like\n<a href="https://github.com/typestack/routing-controllers">routing-controls</a> or\n<a href="https://docs.nestjs.com/">nest.js</a> which does the same thing just for\nexpress.</p>\n<div class="info">\n<strong>@tdm/service-mocker</strong> has more then just controllers and methods, it\nis a full solution providing a client, server and a fully typed\nmessaging system using decorators. \n</div>\n\n<h3><a id="persistent" class="anchor" href="#persistent"><span class="header-link"></span></a>Persistent</h3><p>For storing and retrieving data we use <strong>localForage</strong>, a very popular\nlibrary for working with browser based persistent layers. We can use\n<strong>localForage</strong> directly but we want to build it with the same mindset,\nusing decorators and metadata.</p>\n<p>Our server is based on model/controller architecture, we need to read/write them and we know\nhow (localForage).</p>\n<p>With that goal in mind we built the package <strong>@tdm/local-forage</strong>. A\n<code>@tdm/data</code> based data adapter the wrap&#39;s the package <strong>localForage</strong>\nand ex[pose easy to use building blocks (decorators) to quickly setup\na localForage persistent later.</p>\n<p>In fact, <strong>@tdm/local-forage</strong> is just like <strong>ngx-http-client</strong> they\nboth serve the same purpose but for different persistent layers.</p>\n<p><strong>@tdm/service-mocker</strong> &amp; <strong>@tdm/local-forage</strong> are not covered in\nthis tutorial. They might get a tutorial of their own in the future.</p>\n<h3><a id="examples" class="anchor" href="#examples"><span class="header-link"></span></a>Examples</h3><p><strong>client</strong></p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Client, ClientBase, OnMessage } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/service-mocker/client\'</span>;\n<span class="hljs-keyword">import</span> { ClientPostMessageEvent, ServerRequest, ClientResponse } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/service-mocker/shared\'</span>;\n\n<span class="hljs-meta">@Client</span>({\n  scriptURL: <span class="hljs-string">\'./sw.js\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> SWClient <span class="hljs-keyword">extends</span> ClientBase {\n  <span class="hljs-meta">@OnMessage</span>()\n  installed(data: ServerRequest&lt;<span class="hljs-string">\'installed\'</span>&gt;): <span class="hljs-built_in">Promise</span>&lt;ClientResponse&lt;<span class="hljs-string">\'installed\'</span>&gt;&gt; {\n    <span class="hljs-keyword">return</span> &lt;<span class="hljs-built_in">any</span>&gt; <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">12</span>);\n  }\n\n  <span class="hljs-comment">/**\n   * Sending a command to the server, to restore the database with\n   * the provided object\n   */</span>\n  restoreDB(): <span class="hljs-built_in">Promise</span>&lt;ClientPostMessageEvent&lt;<span class="hljs-string">\'restoreDb\'</span>&gt;&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">\'./json-db/index\'</span>) <span class="hljs-comment">// json files as database</span>\n      .then( <span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> <span class="hljs-keyword">this</span>.send(<span class="hljs-string">\'restoreDb\'</span>, <span class="hljs-built_in">module</span>.DB, <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>) );\n  }\n\n}\n</code></pre>\n<p><strong>Server</strong></p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { targetStore } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core/tdm\'</span>;\n<span class="hljs-keyword">import</span> { DAO } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/data\'</span>;\n<span class="hljs-keyword">import</span> { MockerResponse } <span class="hljs-keyword">from</span> <span class="hljs-string">\'service-mocker/server\'</span>;\n<span class="hljs-keyword">import</span> {\n  OnMessage,\n  ServerBase,\n  Server,\n  HttpError,\n  FallbackRoute,\n  Response\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/service-mocker\'</span>;\n<span class="hljs-keyword">import</span> { ClientRequest, ServerResponse } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/service-mocker/shared\'</span>;\n<span class="hljs-keyword">import</span> { CategoryController } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./controllers\'</span>;\n\n<span class="hljs-meta">@Server</span>({\n  baseUrl: <span class="hljs-string">\'/api\'</span>,\n  controllers: [\n    CategoryController,\n    <span class="hljs-comment">/* More controllers here... */</span>\n  ]\n})\n<span class="hljs-keyword">class</span> MyServer <span class="hljs-keyword">extends</span> ServerBase {\n  <span class="hljs-meta">@FallbackRoute</span>()\n  handle404(<span class="hljs-meta">@Response</span>() res: MockerResponse): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; | <span class="hljs-built_in">any</span> {\n    <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).json(HttpError.createKnown(<span class="hljs-string">\'404\'</span>));\n  }\n\n  <span class="hljs-comment">/**\n   * A hanlder for the message "restoreDb".\n   * All messages are typed, based on a contract between the server\n   * and the client.\n   */</span>\n  <span class="hljs-meta">@OnMessage</span>()\n  <span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> restoreDb(data: ClientRequest&lt;<span class="hljs-string">\'restoreDb\'</span>&gt;): <span class="hljs-built_in">Promise</span>&lt;ServerResponse&lt;<span class="hljs-string">\'restoreDb\'</span>&gt;&gt; {\n    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> tName of <span class="hljs-built_in">Object</span>.keys(data) ) {\n      <span class="hljs-keyword">const</span> target = targetStore.findTarget(tName);\n      <span class="hljs-keyword">if</span> ( target ) {\n        <span class="hljs-keyword">const</span> dao = DAO.localForage(target);\n        <span class="hljs-keyword">await</span> dao.clear();\n        <span class="hljs-keyword">await</span> dao.createBulk(data[tName]);\n      }\n    }\n\n    <span class="hljs-keyword">return</span>;\n  }\n}\n\n<span class="hljs-keyword">const</span> server = <span class="hljs-keyword">new</span> MyServer();\n</code></pre>\n<p><strong>model</strong> (local forage)</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Identity, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { LocalForageResource } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/local-forage\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> modelContract <span class="hljs-keyword">from</span> <span class="hljs-string">\'../shared-models\'</span>;\n\n<span class="hljs-meta">@LocalForageResource</span>({\n  resName: <span class="hljs-string">\'categories\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Category <span class="hljs-keyword">implements</span> modelContract.Category {\n  <span class="hljs-meta">@Identity</span>()\n  <span class="hljs-meta">@Prop</span>()\n  CategoryID: <span class="hljs-built_in">number</span>;\n  <span class="hljs-meta">@Prop</span>()\n  CategoryName: <span class="hljs-built_in">string</span>;\n  <span class="hljs-meta">@Prop</span>()\n  Description: <span class="hljs-built_in">string</span>;\n  <span class="hljs-meta">@Prop</span>()\n  Picture: <span class="hljs-built_in">string</span>;\n}\n</code></pre>\n<p><strong>controller</strong> (for the above model)</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Constructor } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { DAO } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/data\'</span>;\n<span class="hljs-keyword">import</span> {\n  ServiceMockController,\n  ServiceMockGet,\n  ServiceMockPost,\n  ServiceMockPut,\n  ServiceMockPatch,\n  Body,\n  Param\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/service-mocker\'</span>;\n<span class="hljs-keyword">import</span> { Category } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../models\'</span>;\n\n<span class="hljs-meta">@ServiceMockController</span>({\n  path: <span class="hljs-string">\'/categories\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> CategoryController {\n\n  <span class="hljs-meta">@ServiceMockGet</span>({\n    path: <span class="hljs-string">\'/\'</span>\n  })\n  getAll(): <span class="hljs-built_in">Promise</span>&lt;T[]&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DAO().query(Category);\n  };\n\n  <span class="hljs-meta">@ServiceMockGet</span>({\n    path: <span class="hljs-string">\'/:id\'</span>\n  })\n  <span class="hljs-keyword">get</span>(<span class="hljs-meta">@Param</span>(<span class="hljs-string">\'id\'</span>) id: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">Promise</span>&lt;Category&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DAO().findById(Category, id);\n  };\n\n  <span class="hljs-meta">@ServiceMockPost</span>({\n    path: <span class="hljs-string">\'/\'</span>,\n    httpCode: <span class="hljs-number">204</span>\n  })\n  create(<span class="hljs-meta">@Body</span>() body): <span class="hljs-built_in">Promise</span>&lt;T | <span class="hljs-built_in">void</span>&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DAO().create&lt;Category&gt;(Category, body);\n  };\n\n  <span class="hljs-meta">@ServiceMockPatch</span>({\n    path: <span class="hljs-string">\'/:id\'</span>,\n    httpCode: <span class="hljs-number">204</span>\n  })\n  update(<span class="hljs-meta">@Body</span>() body): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DAO().update(Category, body).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-literal">null</span> );\n  };\n\n  <span class="hljs-meta">@ServiceMockPut</span>({\n    path: <span class="hljs-string">\'/:id\'</span>,\n    httpCode: <span class="hljs-number">204</span>\n  })\n  replace(<span class="hljs-meta">@Body</span>() body): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DAO().replace(Category, body).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-literal">null</span> );\n  };\n}\n</code></pre>\n<div class="info">\nReal implementation consists of 1 base class with all methods with\ncontrollers inheriting and only changing the <code>resName</code>\n</div>\n'},{file:"dao-ar-example.ts",lang:"ts",section:"MODEL",code:'<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> UIDeveloper {\n  id: <span class="hljs-built_in">number</span>;\n\n  name: <span class="hljs-built_in">string</span>;\n\n  framework: <span class="hljs-string">\'angular\'</span> | <span class="hljs-string">\'react\'</span> | <span class="hljs-string">\'vue\'</span> | <span class="hljs-string">\'other\'</span>;\n}',title:"From a Model"},{file:"dao-ar-example.ts",lang:"ts",section:"DAO",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { NgDAO } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-http-client\'</span>; \n\n<span class="hljs-comment">// @Component({ /* ... */ })</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DaoExampleComponent {\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> ngDao: NgDAO</span>) { }\n\n  <span class="hljs-keyword">async</span> updateUiDev(): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {\n    <span class="hljs-keyword">let</span> uiDev = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ngDao.get(UIDeveloper).findById(<span class="hljs-number">15</span>);\n    uiDev.framework = <span class="hljs-string">\'angular\'</span>;\n    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ngDao.get(UIDeveloper).update(uiDev);\n  }\n}\n',title:"TO: Data Access Object"},{file:"dao-ar-example.ts",lang:"ts",section:"AR",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n\n<span class="hljs-comment">// @Component({ /* ... */ })</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ActiveRecordExampleComponent {\n  <span class="hljs-keyword">async</span> updateUiDevAr(): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {\n    <span class="hljs-keyword">const</span> uiDev = <span class="hljs-keyword">await</span> UIDeveloper.findById(<span class="hljs-number">15</span>);\n    uiDev.framework = <span class="hljs-string">\'angular\'</span>;\n    <span class="hljs-keyword">await</span> uiDev.$save();\n  }\n}',title:"OR: Active Record"},{file:"introduction.component.ts",lang:"ts",section:"code",code:'<span class="hljs-comment">/* Dependency Injection - ngDao: NgDAO */</span>\r\n<span class="hljs-keyword">this</span>.ngDao.get(Customer).findById(<span class="hljs-string">\'ALFKI\'</span>);\r\n'}]}}]);